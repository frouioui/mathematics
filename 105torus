#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os, sys, math

def check_opt(opt):
	if opt == 1 or opt == 2 or opt == 3:
		return 0
	else:
		return 1

def f(c, a0, a1, a2, a3, a4):
	c = c
	return a0 + a1 * c + a2 * math.pow(c, 2) + a3 * math.pow(c, 3) + a4 * math.pow(c, 4)

def f_prime(c, a0, a1, a2, a3, a4):
	res = (4 * a4 * math.pow(c, 3) + 3 * a3 * math.pow(c, 2) + 2 * a2 * c + a1)
	if res == 0:
		print("You are attempting a division by 0, ERROR!\n")
		sys.exit(84)
	return res

def method_bisection(a0, a1, a2, a3, a4, n):
	a = 0.0
	b = 1.0
	while b - a > math.pow(10, -6):
		c = (a + b) / 2
		if (pow(10, n) * c % 1 == 0):
			print "x =", c
		else:
			print "x = %.*f" % (n, c)
		if (f(a, a0, a1, a2, a3, a4) < 0 and f(c, a0, a1, a2, a3, a4) > 0) or (f(a, a0, a1, a2, a3, a4) > 0 and f(c, a0, a1, a2, a3, a4) < 0):
			b = c
		else:
			a = c

def mehtod_newton(a0, a1, a2, a3, a4, n):
	c = 0.5
	while abs(f(c, a0, a1, a2, a3, a4)) > math.pow(10, -n):
		if math.pow(10, n) * c % 1 == 0:
			print ("x = %g" % (c))
		else:
			print("x = %.*f" % (n, c))
		c = c - f(c, a0, a1, a2, a3, a4) / f_prime(c, a0, a1, a2, a3, a4)
	if math.pow(10, n) * c % 1 == 0:
		print ("x = %g" % (c))
	else:
		print("x = %.*f" % (n, c))

def method_secant(a0, a1, a2, a3, a4, n):
	a = 0.0
	b = 1.0
	while abs(b - a) > math.pow(10, -n):
		c = b - f(b, a0, a1, a2, a3, a4) * (b - a) / (f(b, a0, a1, a2, a3, a4) - f(a, a0, a1, a2, a3, a4))
		a = b
		b = c
		if (pow(10, n) * c % 1 == 0):
			print "x =", c
		else:
			print "x = %.*f" % (n, c)


if len(sys.argv) == 8:
	try:
		opt = int(sys.argv[1])
		a0, a1, a2 = int(sys.argv[2]), int(sys.argv[3]), int(sys.argv[4])
		a3, a4 = int(sys.argv[5]), int(sys.argv[6])
		n = int(sys.argv[7])
		if check_opt(opt) == 1 or n < 0:
			sys.exit(84)
		if a1 == 0 and a2 == 0 and a3 == 0 and a4 == 0:
			sys.exit(84)
	except:
		print "[ERROR] : please enter valid arguments"
		sys.exit(84)
	if opt == 1:
		method_bisection(a0, a1, a2, a3, a4, n)
	if opt == 2:
		mehtod_newton(a0, a1, a2, a3, a4, n)
	if opt == 3:
		method_secant(a0, a1, a2, a3, a4, n)

else:
	print "[ERROR] : please enter 7 arguments"
	sys.exit(84)
